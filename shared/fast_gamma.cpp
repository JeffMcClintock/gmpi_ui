#include "./fast_gamma.h"
#error Remove this file from your project, you don't need it. It's empty.

namespace se_sdk
{
	/*
	float FastGamma::toFloat[] = {
		0.000000, 0.000304, 0.000607, 0.000911, 0.001214, 0.001518, 0.001821, 0.002125, 0.002428, 0.002732,
		0.003035, 0.003347, 0.003677, 0.004025, 0.004391, 0.004777, 0.005182, 0.005605, 0.006049, 0.006512,
		0.006995, 0.007499, 0.008023, 0.008568, 0.009134, 0.009721, 0.010330, 0.010960, 0.011612, 0.012286,
		0.012983, 0.013702, 0.014444, 0.015209, 0.015996, 0.016807, 0.017642, 0.018500, 0.019382, 0.020289,
		0.021219, 0.022174, 0.023153, 0.024158, 0.025187, 0.026241, 0.027321, 0.028426, 0.029557, 0.030713,
		0.031896, 0.033105, 0.034340, 0.035601, 0.036889, 0.038204, 0.039546, 0.040915, 0.042311, 0.043735,
		0.045186, 0.046665, 0.048172, 0.049707, 0.051269, 0.052861, 0.054480, 0.056128, 0.057805, 0.059511,
		0.061246, 0.063010, 0.064803, 0.066626, 0.068478, 0.070360, 0.072272, 0.074214, 0.076185, 0.078187,
		0.080220, 0.082283, 0.084376, 0.086500, 0.088656, 0.090842, 0.093059, 0.095307, 0.097587, 0.099899,
		0.102242, 0.104616, 0.107023, 0.109462, 0.111932, 0.114435, 0.116971, 0.119538, 0.122139, 0.124772,
		0.127438, 0.130136, 0.132868, 0.135633, 0.138432, 0.141263, 0.144128, 0.147027, 0.149960, 0.152926,
		0.155926, 0.158961, 0.162029, 0.165132, 0.168269, 0.171441, 0.174647, 0.177888, 0.181164, 0.184475,
		0.187821, 0.191202, 0.194618, 0.198069, 0.201556, 0.205079, 0.208637, 0.212231, 0.215861, 0.219526,
		0.223228, 0.226966, 0.230740, 0.234551, 0.238398, 0.242281, 0.246201, 0.250158, 0.254152, 0.258183,
		0.262251, 0.266356, 0.270498, 0.274677, 0.278894, 0.283149, 0.287441, 0.291771, 0.296138, 0.300544,
		0.304987, 0.309469, 0.313989, 0.318547, 0.323143, 0.327778, 0.332452, 0.337164, 0.341914, 0.346704,
		0.351533, 0.356400, 0.361307, 0.366253, 0.371238, 0.376262, 0.381326, 0.386429, 0.391572, 0.396755,
		0.401978, 0.407240, 0.412543, 0.417885, 0.423268, 0.428690, 0.434154, 0.439657, 0.445201, 0.450786,
		0.456411, 0.462077, 0.467784, 0.473531, 0.479320, 0.485150, 0.491021, 0.496933, 0.502886, 0.508881,
		0.514918, 0.520996, 0.527115, 0.533276, 0.539479, 0.545724, 0.552011, 0.558340, 0.564712, 0.571125,
		0.577580, 0.584078, 0.590619, 0.597202, 0.603827, 0.610496, 0.617207, 0.623960, 0.630757, 0.637597,
		0.644480, 0.651406, 0.658375, 0.665387, 0.672443, 0.679542, 0.686685, 0.693872, 0.701102, 0.708376,
		0.715694, 0.723055, 0.730461, 0.737910, 0.745404, 0.752942, 0.760525, 0.768151, 0.775822, 0.783538,
		0.791298, 0.799103, 0.806952, 0.814847, 0.822786, 0.830770, 0.838799, 0.846873, 0.854993, 0.863157,
		0.871367, 0.879622, 0.887923, 0.896269, 0.904661, 0.913099, 0.921582, 0.930111, 0.938686, 0.947307,
		0.955973, 0.964686, 0.973445, 0.982251, 0.991102, 1.000000
	};

	float FastGamma::toSRGB[] =
	{
		0.000000, 0.000152, 0.000455, 0.000759, 0.001062, 0.001366, 0.001669, 0.001973, 0.002276, 0.002580,
		0.002884, 0.003188, 0.003509, 0.003848, 0.004206, 0.004582, 0.004977, 0.005391, 0.005825, 0.006278,
		0.006751, 0.007245, 0.007759, 0.008293, 0.008848, 0.009425, 0.010023, 0.010642, 0.011283, 0.011947,
		0.012632, 0.013340, 0.014070, 0.014823, 0.015600, 0.016399, 0.017222, 0.018068, 0.018938, 0.019832,
		0.020751, 0.021693, 0.022661, 0.023652, 0.024669, 0.025711, 0.026778, 0.027870, 0.028988, 0.030132,
		0.031301, 0.032497, 0.033719, 0.034967, 0.036242, 0.037544, 0.038872, 0.040227, 0.041610, 0.043020,
		0.044457, 0.045922, 0.047415, 0.048936, 0.050484, 0.052062, 0.053667, 0.055301, 0.056963, 0.058655,
		0.060375, 0.062124, 0.063903, 0.065711, 0.067548, 0.069415, 0.071312, 0.073239, 0.075196, 0.077183,
		0.079200, 0.081247, 0.083326, 0.085434, 0.087574, 0.089745, 0.091946, 0.094179, 0.096443, 0.098739,
		0.101066, 0.103425, 0.105816, 0.108238, 0.110693, 0.113180, 0.115699, 0.118250, 0.120835, 0.123451,
		0.126101, 0.128783, 0.131498, 0.134247, 0.137028, 0.139843, 0.142692, 0.145574, 0.148489, 0.151439,
		0.154422, 0.157439, 0.160491, 0.163576, 0.166696, 0.169851, 0.173040, 0.176264, 0.179522, 0.182815,
		0.186143, 0.189507, 0.192905, 0.196339, 0.199808, 0.203313, 0.206853, 0.210429, 0.214041, 0.217689,
		0.221373, 0.225092, 0.228848, 0.232641, 0.236470, 0.240335, 0.244237, 0.248175, 0.252151, 0.256163,
		0.260212, 0.264298, 0.268422, 0.272583, 0.276781, 0.281017, 0.285290, 0.289601, 0.293950, 0.298336,
		0.302761, 0.307223, 0.311724, 0.316263, 0.320840, 0.325456, 0.330110, 0.334803, 0.339534, 0.344304,
		0.349113, 0.353961, 0.358849, 0.363775, 0.368740, 0.373745, 0.378789, 0.383873, 0.388996, 0.394159,
		0.399362, 0.404604, 0.409886, 0.415209, 0.420571, 0.425974, 0.431417, 0.436900, 0.442424, 0.447988,
		0.453593, 0.459239, 0.464925, 0.470653, 0.476421, 0.482230, 0.488080, 0.493972, 0.499905, 0.505879,
		0.511894, 0.517951, 0.524050, 0.530191, 0.536373, 0.542597, 0.548863, 0.555171, 0.561521, 0.567913,
		0.574347, 0.580824, 0.587343, 0.593905, 0.600509, 0.607156, 0.613846, 0.620578, 0.627353, 0.634172,
		0.641033, 0.647937, 0.654885, 0.661876, 0.668910, 0.675987, 0.683108, 0.690273, 0.697481, 0.704733,
		0.712029, 0.719369, 0.726752, 0.734180, 0.741652, 0.749168, 0.756728, 0.764332, 0.771981, 0.779674,
		0.787412, 0.795195, 0.803022, 0.810894, 0.818811, 0.826772, 0.834779, 0.842830, 0.850927, 0.859069,
		0.867256, 0.875489, 0.883767, 0.892091, 0.900460, 0.908874, 0.917335, 0.925841, 0.934393, 0.942990,
		0.951634, 0.960324, 0.969060, 0.977842, 0.986671, 0.995545
	};
	*/

#if 0
	bool PrintSrgbCurves()
	{
		// Print sRGB _> luminosity curve;

		for (int i = 0; i < 256; ++i)
		{
			double p = i / 255.0;
			/*
			double gamma;
			if (p <= 0.0404482362771082)
			{
				gamma = p / 12.92;
			}
			else
			{
				gamma = pow((p + 0.055) / 1.055, 2.4);
			}
			*/
			double gamma = linearToSrgb(p);

			//		float gamma = pow(i, 2.2);
			_RPT1(_CRT_WARN, "%f, ", gamma);

			if (i % 10 == 9)
				_RPT0(_CRT_WARN, "\n");
		}

		_RPT0(_CRT_WARN, "\n");
		_RPT0(_CRT_WARN, "\n");
		// Print luminosity -> sRGB _ curve;

		_RPT1(_CRT_WARN, "%f, ", 0.0); // first entry is zero.
		for (int i = 1; i < 256; ++i)
		{
			double p = (i - 0.5) / 255.0; // halfway between values.
/*
			double gamma;
			if (p <= 0.0404482362771082)
			{
				gamma = p / 12.92;
			}
			else
			{
				gamma = pow((p + 0.055) / 1.055, 2.4);
			}
*/
			double gamma = linearToSrgb(p);

			//		float gamma = pow(i, 2.2);
			_RPT1(_CRT_WARN, "%f, ", gamma);

			if (i % 10 == 9)
				_RPT0(_CRT_WARN, "\n");
		}

		return true;
	}

	const bool dd = PrintSrgbCurves();
#endif

}
